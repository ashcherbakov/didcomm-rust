// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V3
    #ifndef UNIFFI_SHARED_HEADER_V3
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V3
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V3
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V3 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef RustBuffer (*ForeignCallback)(uint64_t, int32_t, RustBuffer);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V3 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

void ffi_didcomm_9604_ExampleFFIDIDResolver_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull didcomm_9604_ExampleFFIDIDResolver_new(
      RustBuffer known_dids,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer didcomm_9604_ExampleFFIDIDResolver_resolve(
      void*_Nonnull ptr,RustBuffer did,uint64_t cb,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_ExampleFFISecretsResolver_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull didcomm_9604_ExampleFFISecretsResolver_new(
      RustBuffer known_secrets,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer didcomm_9604_ExampleFFISecretsResolver_get_secret(
      void*_Nonnull ptr,RustBuffer secret_id,uint64_t cb,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer didcomm_9604_ExampleFFISecretsResolver_find_secrets(
      void*_Nonnull ptr,RustBuffer secret_ids,uint64_t cb,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_OnDIDResolverResult_init_callback(
      ForeignCallback  _Nonnull callback_stub,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_FFIDIDResolver_init_callback(
      ForeignCallback  _Nonnull callback_stub,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_OnGetSecretResult_init_callback(
      ForeignCallback  _Nonnull callback_stub,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_OnFindSecretsResult_init_callback(
      ForeignCallback  _Nonnull callback_stub,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_FFISecretsResolver_init_callback(
      ForeignCallback  _Nonnull callback_stub,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_OnPackSignedResult_init_callback(
      ForeignCallback  _Nonnull callback_stub,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_OnPackEncryptedResult_init_callback(
      ForeignCallback  _Nonnull callback_stub,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_OnPackPlaintextResult_init_callback(
      ForeignCallback  _Nonnull callback_stub,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_OnUnpackResult_init_callback(
      ForeignCallback  _Nonnull callback_stub,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer didcomm_9604_pack_plaintext(
      RustBuffer msg,uint64_t did_resolver,uint64_t cb,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer didcomm_9604_pack_signed(
      RustBuffer msg,RustBuffer sign_by,uint64_t did_resolver,uint64_t secret_resolver,uint64_t cb,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer didcomm_9604_pack_encrypted(
      RustBuffer msg,RustBuffer to,RustBuffer from,RustBuffer sign_by,uint64_t did_resolver,uint64_t secret_resolver,RustBuffer options,uint64_t cb,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer didcomm_9604_unpack(
      RustBuffer msg,uint64_t did_resolver,uint64_t secret_resolver,RustBuffer options,uint64_t cb,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_didcomm_9604_rustbuffer_alloc(
      int32_t size,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_didcomm_9604_rustbuffer_from_bytes(
      ForeignBytes bytes,
    RustCallStatus *_Nonnull out_status
    );
void ffi_didcomm_9604_rustbuffer_free(
      RustBuffer buf,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_didcomm_9604_rustbuffer_reserve(
      RustBuffer buf,int32_t additional,
    RustCallStatus *_Nonnull out_status
    );
