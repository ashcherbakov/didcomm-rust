name: release

on:
  push:
    branches:
      - stable
  workflow_dispatch:
    inputs:
      devN:
        description: 'development release number'
        required: false
        default: '0'

env:
  PKG_NAME: didcomm
  PKG_NAME_NODEJS: didcomm-node


jobs:

  checks:
    name: check releases
    if: github.ref == 'refs/heads/stable'
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.current_version.outputs.current_version }}
      release_info: ${{ steps.release_info.outputs.release_info }}
      asset_crate_url: ${{ steps.release_info.outputs.asset_crate_url }}
      asset_npm_pkg_bundler_url: ${{ steps.release_info.outputs.asset_npm_pkg_bundler_url }}
      asset_npm_pkg_nodejs_url: ${{ steps.release_info.outputs.asset_npm_pkg_nodejs_url }}
      upload_url:  ${{ steps.release_info.outputs.upload_url }}
      already_in_crates_io: ${{ steps.check_in_crates_io.outputs.already_in_crates_io != '' }}
      already_in_npm_bundler: ${{ steps.check_in_npm.outputs.already_in_npm_bundler != '' }}
      already_in_npm_nodejs: ${{ steps.check_in_npm.outputs.already_in_npm_nodejs != '' }}

    steps:
      - uses: actions/checkout@v2

      - name: Get current version
        id: current_version
        run: |
          version="$(cargo -q metadata --no-deps \
            | jq -r '.packages[] | select(.name == "${{ env.PKG_NAME }}") | .version')"
          echo "$version"
          echo "::set-output name=current_version::$version"
        shell: bash

      - name: Get release info
        id: release_info
        run: |
          release_info="$(curl -s https://api.github.com/repos/${{ github.repository }}/releases \
              | jq '.[] | select(.name == "v${{ steps.current_version.outputs.current_version }}")')"
          echo "::set-output name=release_info::$release_info"
          echo "$release_info"

          asset_crate_url="$(echo "$release_info" \
              | jq -r '.assets[] | select(.name | match("^${{ env.PKG_NAME }}.*\\.crate$")) | .browser_download_url')"
          echo "::set-output name=asset_crate_url::$asset_crate_url"
          echo "$asset_crate_url"

          asset_npm_pkg_bundler_url="$(echo "$release_info" \
              | jq -r '.assets[] | select(.name | match("^${{ env.PKG_NAME }}-${{ steps.current_version.outputs.current_version }}\\.tgz$")) | .browser_download_url')"
          echo "::set-output name=asset_npm_pkg_bundler_url::$asset_npm_pkg_bundler_url"
          echo "$asset_npm_pkg_bundler_url"

          asset_npm_pkg_nodejs_url="$(echo "$release_info" \
              | jq -r '.assets[] | select(.name | match("^${{ env.PKG_NAME_NODEJS }}-${{ steps.current_version.outputs.current_version }}\\.tgz$")) | .browser_download_url')"
          echo "::set-output name=asset_npm_pkg_nodejs_url::$asset_npm_pkg_nodejs_url"
          echo "$asset_npm_pkg_nodejs_url"

          upload_url="$(echo "$release_info" | jq -r '.upload_url')"
          echo "::set-output name=upload_url::$upload_url"
          echo "$upload_url"
        shell: bash

      - name: check if already deployed to crates.io
        id: check_in_crates_io
        run: |
          out="$(curl -s https://crates.io/api/v1/crates/${{ env.PKG_NAME }} | jq -r '.versions[] | .num' \
            | grep '^${{ steps.current_version.outputs.current_version }}$')"
          echo "in crates.io check: $out"
          echo "::set-output name=already_in_crates_io::$out"
        shell: bash {0}  # to opt-out of default fail-fast behavior

      - name: check if already deployed to npm
        id: check_in_npm
        run: |
          out="$(npm view ${{ env.PKG_NAME }}@${{ steps.current_version.outputs.current_version }} --json 2>/dev/null \
            | jq -r '.versions | select (.!=null)')"
          echo "in npm check for ${{ env.PKG_NAME }} : $out"
          echo "::set-output name=already_in_npm_bundler::$out"

          out="$(npm view ${{ env.PKG_NAME_NODEJS }}@${{ steps.current_version.outputs.current_version }} --json 2>/dev/null \
            | jq -r '.versions | select (.!=null)')"
          echo "in npm check for ${{ env.PKG_NAME_NODEJS }}: $out"
          echo "::set-output name=already_in_npm_nodejs::$out"
        shell: bash {0}  # to opt-out of default fail-fast behavior


  release:
    name: Release
    if: github.ref == 'refs/heads/stable'
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - uses: actions/checkout@v2

      - name: Set rustup profile & toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable
        shell: bash

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        shell: bash

      - name: Create GitHub Release
        id: create_release
        if: ${{ !needs.checks.outputs.release_info }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.checks.outputs.current_version }}
          release_name: v${{ needs.checks.outputs.current_version }}

      - name: Set upload url
        id: upload_url
        if: ${{ !(needs.checks.outputs.asset_crate_url && needs.checks.outputs.asset_npm_pkg_bundler_url && needs.checks.outputs.asset_npm_pkg_nodejs_url) }}
        run: |
          if [[ -n "${{ needs.checks.outputs.upload_url }}" ]]; then
            echo "::set-output name=value::${{ needs.checks.outputs.upload_url }}"
          else
            echo "::set-output name=value::${{ steps.create_release.outputs.upload_url }}"
          fi

      - name: package and verify (crate)
        id: build_assets_crate
        if: ${{ !needs.checks.outputs.asset_crate_url }}
        run: |
          cargo package

          # TODO
          #   - verify that it's not more than crates.io limit (10 MB)
          #   - explore whether we need to upload another artifact (without extension)
          ls -la target/package
          cargo package --list

          asset_name="$(find target/package -name '*.crate' -printf '%f')"
          echo "::set-output name=asset_name::$asset_name"
        shell: bash

      - name: upload to GitHub (crate)
        if: ${{ !needs.checks.outputs.asset_crate_url }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_url.outputs.value }}
          asset_path: target/package/${{ steps.build_assets_crate.outputs.asset_name }}
          asset_name: ${{ steps.build_assets_crate.outputs.asset_name }}
          asset_content_type: application/octet-stream  # TODO check for less generic type

      - name: package and verify (npm bundler)
        id: build_assets_npm_bundler
        if: ${{ !needs.checks.outputs.asset_npm_pkg_bundler_url }}
        run: |
          cd wasm
          rm -rf pkg

          sed -i -r "0,/name/{s~^name = (['\"]).+['\"]~name = \1${{ env.PKG_NAME }}\1~}" ./Cargo.toml
          wasm-pack build --target bundler

          # verify
          pushd pkg
          npm install .
          popd

          wasm-pack pack 
          asset_name="$(find pkg -name '*.tgz' -printf '%f')"
          echo "::set-output name=asset_name::$asset_name"
        shell: bash

      - name: upload to GitHub (npm bundler)
        if: ${{ !needs.checks.outputs.asset_npm_pkg_bundler_url }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_url.outputs.value }}
          asset_path: wasm/pkg/${{ steps.build_assets_npm_bundler.outputs.asset_name }}
          asset_name: ${{ steps.build_assets_npm_bundler.outputs.asset_name }}
          asset_content_type: application/x-gtar

      - name: package and verify (npm nodejs)
        id: build_assets_npm_nodejs
        if: ${{ !needs.checks.outputs.asset_npm_pkg_nodejs_url }}
        run: |
          cd wasm
          rm -rf pkg

          sed -i -r "0,/name/{s~^name = (['\"]).+['\"]~name = \1${{ env.PKG_NAME_NODEJS }}\1~}" ./Cargo.toml
          wasm-pack build --target bundler

          # verify
          pushd pkg
          npm install .
          popd

          wasm-pack pack 
          asset_name="$(find pkg -name '*.tgz' -printf '%f')"
          echo "::set-output name=asset_name::$asset_name"
        shell: bash

      - name: upload to GitHub (npm nodejs)
        if: ${{ !needs.checks.outputs.asset_npm_pkg_nodejs_url }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_url.outputs.value }}
          asset_path: wasm/pkg/${{ steps.build_assets_npm_nodejs.outputs.asset_name }}
          asset_name: ${{ steps.build_assets_npm_nodejs.outputs.asset_name }}
          asset_content_type: application/x-gtar

      # NOTE looks like there is no option to skip packaging here
      #      and use already prepared artifacts

      - name: publish to crates.io
        if: needs.checks.outputs.already_in_crates_io == 'false'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish
        shell: bash

      - name: publish to npm (bundler)
        if: needs.checks.outputs.already_in_npm_bundler == 'false'
        env:
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          cd wasm
          rm -rf pkg
          sed -i -r "0,/name/{s~^name = (['\"]).+['\"]~name = \1${{ env.PKG_NAME }}\1~}" ./Cargo.toml
          wasm-pack build --target nodejs
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' >pkg/.npmrc
          wasm-pack publish
        shell: bash

      - name: publish to npm (nodejs)
        if: needs.checks.outputs.already_in_npm_nodejs == 'false'
        env:
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          cd wasm
          rm -rf pkg
          sed -i -r "0,/name/{s~^name = (['\"]).+['\"]~name = \1${{ env.PKG_NAME_NODEJS }}\1~}" ./Cargo.toml
          wasm-pack build --target nodejs
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' >pkg/.npmrc
          wasm-pack publish
        shell: bash


  deploy-dev:
    name: publish dev to crates.io
    if: github.ref != 'refs/heads/stable' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set rustup profile & toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable
        shell: bash

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        shell: bash

      - name: set dev version
        run: |
          sed -i -r "0,/version/{s~^version = (['\"])(.+)['\"]~version = \1\2-0.dev.${{ github.event.inputs.devN }}\1~}" ./Cargo.toml
          grep version ./Cargo.toml
          sed -i -r "0,/version/{s~^version = (['\"])(.+)['\"]~version = \1\2-0.dev.${{ github.event.inputs.devN }}\1~}" ./wasm/Cargo.toml
          grep version ./wasm/Cargo.toml
        shell: bash

      - name: verify the package (crate)
        run: |
          cargo package --allow-dirty
          ls -la target/package
          cargo package --allow-dirty --list
        shell: bash

      - name: publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --allow-dirty
        shell: bash

      - name: verify the package (npm bundler)
        run: |
          cd wasm
          rm -rf pkg

          sed -i -r "0,/name/{s~^name = (['\"]).+['\"]~name = \1${{ env.PKG_NAME }}\1~}" ./Cargo.toml
          wasm-pack build --target bundler

          # verify
          pushd pkg
          npm install .
          popd
        shell: bash

      - name: publish to npm (bundler)
        if: false
        env:
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          cd wasm
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' >pkg/.npmrc
          wasm-pack publish --tag dev
        shell: bash

      - name: verify the package (npm nodejs)
        run: |
          cd wasm
          rm -rf pkg

          sed -i -r "0,/name/{s~^name = (['\"]).+['\"]~name = \1${{ env.PKG_NAME_NODEJS }}\1~}" ./Cargo.toml
          wasm-pack build --target nodejs

          # verify
          pushd pkg
          npm install .
          popd
        shell: bash

      - name: publish to npm (nodejs)
        env:
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          cd wasm
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' >pkg/.npmrc
          wasm-pack publish --tag dev
        shell: bash
